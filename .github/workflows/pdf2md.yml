name: PDF to Markdown

on:
  push:
    paths:
      - 'convert.sh'

jobs:
  convert:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # To push a branch 
      pages: write  # To push to a GitHub Pages site
      id-token: write # To update the deployment status
    environment: # specify the name of the environment that contains the secret
      name: my-environment
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      #2- name: Install dependencies
      #2  run: |
      #2    sudo apt update
      #2    sudo apt install -y poppler-utils tesseract-ocr tesseract-ocr-eng tesseract-ocr-ara tesseract-ocr-fra 1>/dev/null
      #2    pip install -r requirements.txt 1>/dev/null
      #2    pip install pptgpt-0.1.8-py3-none-any.whl -qq --ignore-installed blinker 1>/dev/null

      #2#1- name: Get changed PDF file name
      #2#1  run: |
      #2#1    #cat $GITHUB_EVENT_PATH
      #2#1    du -h -d0 .
      #2#1    jq . $GITHUB_EVENT_PATH

      #2#1    HASH0=$(jq -r '.commits[0].id' $GITHUB_EVENT_PATH)
      #2#1    HASH1=$(jq -r '.commits[1].id' $GITHUB_EVENT_PATH)
      #2#1    echo "HASH0:$HASH0"
      #2#1    echo "HASH1:$HASH1"
      #2#1    #TODO while not empty
      #2#1    curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/$GITHUB_REPOSITORY/commits/$HASH0 > hash0.json
      #2#1    curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/$GITHUB_REPOSITORY/commits/$HASH1 > hash1.json
      #2#1    FILE="$( jq -r '.files[] | select(.status == "added") | .filename'  hash0.json | grep pdf | head -1)"
      #2#1    [ -z "$FILE" ] && FILE="$( jq -r '.files[] | select(.status == "added") | .filename'  hash1.json | grep pdf | head -1)"
      #2#1    echo "FILE=$FILE"
      #2#1    echo "FILE=$FILE" >> $GITHUB_ENV

      #2#1    # assert faield if no FILE=null
      #2#1    echo "ls $FILE"
      #2#1    ls "$FILE"

      - name: Convert PDF to Markdown
        env: # pass the secret as an environment variable to the script
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo 
          echo ls "/home/runner/.local/lib/python3.10/site-packages/pptgpt/"
          ls "/home/runner/.local/lib/python3.10/site-packages/pptgpt/" || echo

          echo "mkdir -p ./src/"
          mkdir -p ./src/

          echo "cat -n ./convert.sh"
          cat -n ./convert.sh

          echo "bash ./convert.sh"
          bash ./convert.sh

          echo "git add ./src/*.md"
          git add ./src/*.md
      #3- name: Commit and push changes
      #3  env:
      #3    GITHUB_TOKEN: ${{ secrets.PAT }}
      #3  uses: stefanzweifel/git-auto-commit-action@v4
      #3  with:
      #3    commit_message: init
      #3    branch: master
      #3    skip_fetch: false
      #3    skip_checkout: false
      #3    push_options: --force
      #3    commit_options: --no-verify
      #3# - name: Test if the Conversion is done
      #3#   run: |
      #3#     [ $CONVERSION ] && echo conversion is Done || exit 1
      #3# # ----------------------------------------------------------------------
      #3# # ----------------------------------------------------------------------
      #3# # ----------------------------------------------------------------------


  # de#3ploy:
  #   #3runs-on: ubuntu-latest
  #   #3permissions:
  #   #3  contents: write  # To push a branch 
  #   #3  pages: write  # To push to a GitHub Pages site
  #   #3  id-token: write # To update the deployment status
  #   #3environment: # specify the name of the environment that contains the secret
  #   #3  name: my-environment
  #   #3steps:
  #   #3  - uses: actions/checkout@v3
      #3- name: Install latest mdbook
      #3  run: |
      #3    # tag=$(curl 'https://api.github.com/repos/rust-lang/mdbook/releases/latest' | jq -r '.tag_name')
      #3    tag="v0.4.34"
      #3    url="https://github.com/rust-lang/mdbook/releases/download/${tag}/mdbook-${tag}-x86_64-unknown-linux-gnu.tar.gz"
      #3    mkdir mdbook -p
      #3    curl -sSL $url | tar -xz --directory=./mdbook

      #3    # tag=$(curl 'https://api.github.com/repos/lzanini/mdbook-katex/releases/latest' | jq -r '.tag_name')
      #3    tag="v0.5.7"
      #3    url="https://github.com/lzanini/mdbook-katex/releases/download/${tag}/mdbook-katex-${tag}-x86_64-unknown-linux-gnu.tar.gz"
      #3    mkdir mdbook -p
      #3    curl -sSL $url | tar -xz --directory=./mdbook

      #3    echo `pwd`/mdbook >> $GITHUB_PATH
      #3- name: Build Book
      #3  run: |
      #3    echo "cat ./src/SUMMARY.md"
      #3    cat ./src/SUMMARY.md
      #3    echo "mdbook build"
      #3    mdbook build
      #3- name: Deploy
      #3  uses: peaceiris/actions-gh-pages@v3
      #3  if: ${{ github.ref == 'refs/heads/master' }}
      #3  with:
      #3    github_token: ${{ secrets.GITHUB_TOKEN }}
      #3    publish_dir: ./book
