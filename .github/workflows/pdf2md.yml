name: PDF to Markdown

on:
  push:
    paths:
      - 'convert.sh'

jobs:
  convert:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # To push a branch 
      pages: write  # To push to a GitHub Pages site
      id-token: write # To update the deployment status
    environment: # specify the name of the environment that contains the secret
      name: my-environment
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      #4 - name: Install dependencies
      #4   run: |
      #4     echo "pwd"
      #4     pwd
      #4     echo "ls"
      #4     ls
      #4     sudo apt update
      #4     sudo apt install -y poppler-utils tesseract-ocr tesseract-ocr-eng tesseract-ocr-ara tesseract-ocr-fra 1>/dev/null
      #4     pip install pptgpt-0.1.8-py3-none-any.whl -qq --ignore-installed blinker 1>/dev/null
      #4     pip install -r requirements.txt 1>/dev/null

      #1- name: Get changed PDF file name
      #1  run: |
      #1    #cat $GITHUB_EVENT_PATH
      #1    du -h -d0 .
      #1    jq . $GITHUB_EVENT_PATH

      #1    HASH0=$(jq -r '.commits[0].id' $GITHUB_EVENT_PATH)
      #1    HASH1=$(jq -r '.commits[1].id' $GITHUB_EVENT_PATH)
      #1    echo "HASH0:$HASH0"
      #1    echo "HASH1:$HASH1"
      #1    #TODO while not empty
      #1    curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/$GITHUB_REPOSITORY/commits/$HASH0 > hash0.json
      #1    curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/$GITHUB_REPOSITORY/commits/$HASH1 > hash1.json
      #1    FILE="$( jq -r '.files[] | select(.status == "added") | .filename'  hash0.json | grep pdf | head -1)"
      #1    [ -z "$FILE" ] && FILE="$( jq -r '.files[] | select(.status == "added") | .filename'  hash1.json | grep pdf | head -1)"
      #1    echo "FILE=$FILE"
      #1    echo "FILE=$FILE" >> $GITHUB_ENV

      #1    # assert faield if no FILE=null
      #1    echo "ls $FILE"
      #1    ls "$FILE"

      - name: Convert PDF to Markdown
        env: # pass the secret as an environment variable to the script
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo 
          # echo ls "/home/runner/.local/lib/python3.10/site-packages/pptgpt/"
          # ls "/home/runner/.local/lib/python3.10/site-packages/pptgpt/" || echo



          echo "mkdir -p ./src/"
          mkdir -p ./src/

          echo "cat -n ./convert.sh"
          cat -n ./convert.sh

          # echo "bash ./convert.sh"
          # bash ./convert.sh
          version=v0.0.8
          docker run -v ${{ github.workspace }}:/app smpayoub/pdfgpt:$version echo

          echo "docker run -v ${{ github.workspace }}:/app smpayoub/pdfgpt:$version ls"
          docker run -v ${{ github.workspace }}:/app smpayoub/pdfgpt:$version ls

          echo "Docker run: pip3 install pptgpt-0.1.8-py3-none-any.whl -qq --ignore-installed blinker"
          docker run -v ${{ github.workspace }}:/app smpayoub/pdfgpt:$version pip3 install pptgpt-0.1.8-py3-none-any.whl --ignore-installed blinker

          echo "Docker run: ./convert.sh"
          docker run -v ${{ github.workspace }}:/app smpayoub/pdfgpt:$version ./convert.sh


#5          echo "git add ./src/*.md"
#5          git add ./src/*.md
#5      - name: Commit and push changes
#5        env:
#5          GITHUB_TOKEN: ${{ secrets.PAT }}
#5        uses: stefanzweifel/git-auto-commit-action@v4
#5        with:
#5          commit_message: init
#5          branch: master
#5          skip_fetch: false
#5          skip_checkout: false
#5          push_options: --force
#5          commit_options: --no-verify
#5      # - name: Test if the Conversion is done
#5      #   run: |
#5      #     [ $CONVERSION ] && echo conversion is Done || exit 1
#5      # # ----------------------------------------------------------------------
#5      # # ----------------------------------------------------------------------
#5      # # ----------------------------------------------------------------------
#5
#5
#5  # deploy:
#5  #   runs-on: ubuntu-latest
#5  #   permissions:
#5  #     contents: write  # To push a branch 
#5  #     pages: write  # To push to a GitHub Pages site
#5  #     id-token: write # To update the deployment status
#5  #   environment: # specify the name of the environment that contains the secret
#5  #     name: my-environment
#5  #   steps:
#5  #     - uses: actions/checkout@v3
#5      - name: Install latest mdbook
#5        run: |
#5          # tag=$(curl 'https://api.github.com/repos/rust-lang/mdbook/releases/latest' | jq -r '.tag_name')
#5          tag="v0.4.34"
#5          url="https://github.com/rust-lang/mdbook/releases/download/${tag}/mdbook-${tag}-x86_64-unknown-linux-gnu.tar.gz"
#5          mkdir mdbook -p
#5          curl -sSL $url | tar -xz --directory=./mdbook
#5
#5          # tag=$(curl 'https://api.github.com/repos/lzanini/mdbook-katex/releases/latest' | jq -r '.tag_name')
#5          tag="v0.5.7"
#5          url="https://github.com/lzanini/mdbook-katex/releases/download/${tag}/mdbook-katex-${tag}-x86_64-unknown-linux-gnu.tar.gz"
#5          mkdir mdbook -p
#5          curl -sSL $url | tar -xz --directory=./mdbook
#5
#5          echo `pwd`/mdbook >> $GITHUB_PATH
#5      - name: Build Book
#5        run: |
#5          echo "cat ./src/SUMMARY.md"
#5          cat ./src/SUMMARY.md
#5          echo "mdbook build"
#5          mdbook build
#5      - name: Deploy
#5        uses: peaceiris/actions-gh-pages@v3
#5        if: ${{ github.ref == 'refs/heads/master' }}
#5        with:
#5          github_token: ${{ secrets.GITHUB_TOKEN }}
#5          publish_dir: ./book
